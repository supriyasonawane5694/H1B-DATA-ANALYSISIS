package problem10;


import java.io.*;
import java.util.TreeMap;

import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class JobTitle_SuccessRate {

	
	public static class MapClass extends Mapper<LongWritable,Text,Text,Text>
	   {
	      public void map(LongWritable key, Text value, Context context)
	      {	    	  
	         try{
	            String[] str = value.toString().split("\t");	 
	            String  Job_title = str[4];
	            String case_status = str[1];
	            context.write(new Text(Job_title),new Text(case_status));
	            }
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	      }
	   }
	 public static class ReduceClass extends Reducer<Text,Text,NullWritable,Text>
	   {
		  TreeMap<Double, String> Out = new TreeMap<Double,String>();
		    
		    public void reduce(Text key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
		      long totalcount= 0,certified_count=0,certified_withdrawn_count=0 ,Total=0;
		      double job_SuccesRate=0;	
		      String newkey = key.toString();
			       for (Text T : values)
		         {    
		        	 totalcount++;
		        	 String case_status=T.toString();
						if(case_status.equals("CERTIFIED"))
						{
							certified_count++;
						}
						else if(case_status.equals("CERTIFIED-WITHDRAWN"))
						{
							certified_withdrawn_count++;
						}
			      }
			      
				      if(totalcount>=1000) 
				      {
				    	  Total = certified_count+certified_withdrawn_count;
					      job_SuccesRate =((double)Total/(double)totalcount)*100;
				      }
				      if( job_SuccesRate>=70)
				      {
				    	  String OUTPUT = newkey+","+totalcount+","+Total+","+ job_SuccesRate;
				    	  Out.put( job_SuccesRate,OUTPUT);
				      }
	     }
		    protected void cleanup(Context context) throws IOException, InterruptedException{
				for(String val : Out.descendingMap().values()){
					context.write(NullWritable.get(),new Text(val));
      }
	}
}
		    public static void main(String[] args) throws Exception {
			    Configuration conf = new Configuration();
			    Job job = new Job(conf, "H1B DATA");
			    job.setJarByClass(JobTitle_SuccessRate.class);
			    
			    job.setMapperClass(MapClass.class);
			    job.setReducerClass(ReduceClass.class);
			    
			    job.setMapOutputKeyClass(Text.class);
			    job.setMapOutputValueClass(Text.class);
			    
			    job.setOutputKeyClass(NullWritable.class);
			    job.setOutputValueClass(Text.class);
			    
			    FileInputFormat.addInputPath(job, new Path(args[0]));
			    FileOutputFormat.setOutputPath(job, new Path(args[1]));
			    System.exit(job.waitForCompletion(true) ? 0 : 1);
			  }
		}



